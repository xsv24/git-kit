on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+-pre[0-9]+"

name: release

permissions:
  actions: write

env:
  BIN_NAME: git-kit

jobs:
  # prep:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     tag_version: ${{ env.TAG_VERSION }}
  #   steps:
  #     - name: Environment variables
  #       run: |
  #         echo "TAG_VERSION=$(echo $GITHUB_REF | cut -d '/' -f 3)" >> $GITHUB_ENV
  #         echo "version is: ${{ env.TAG_VERSION }}"

  create-release:
    name: create-release
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      tag_version: ${{ env.TAG_VERSION }}
    steps:
      - name: Environment variables
        run: |
          echo "TAG_VERSION=$(echo $GITHUB_REF | cut -d '/' -f 3)" >> $GITHUB_ENV
          echo "version is: ${{ env.TAG_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_VERSION }}
          release_name: ${{ env.TAG_VERSION }}

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: ["create-release"]
    strategy:
      matrix:
        build: [
            linux-x86,
            linux-arm,
            macos-x86,
            macos-arm,
            # win-msvc,
            # win-gnu,
            # win32-msvc,
          ]
        # List of OS versions https://github.com/actions/runner-images
        include:
          - build: linux-x86
            os: ubuntu-22.04
            target: x86_64-unknown-linux-musl

          - build: linux-arm
            os: ubuntu-22.04
            target: arm-unknown-linux-gnueabihf

          - build: macos-x86
            os: macos-12
            target: x86_64-apple-darwin

          - build: macos-arm
            os: macos-12
            target: aarch64-apple-darwin

          # - build: win-msvc
          #   os: windows-2022
          #   target: x86_64-pc-windows-msvc

          # - build: win-gnu
          #   os: windows-2022
          #   target: x86_64-pc-windows-gnu

          # - build: win32-msvc
          #   os: windows-2022
          #   target: i686-pc-windows-msvc

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Give access to .config
        if: matrix.build == 'linux-arm' || matrix.build ==  'linux-x86' 
        run: |
          chown -R $USER:$USER ~/.config

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target=${{ matrix.target }}

      - name: Strip release binary (linux-x86 and macos-x86)
        if: matrix.build == 'linux-x86' || matrix.build == 'macos-x86'
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"

      - name: Strip release binary (linux-arm)
        if: matrix.build == 'linux-arm'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:arm-unknown-linux-gnueabihf \
            arm-linux-gnueabihf-strip \
            /target/arm-unknown-linux-gnueabihf/release/rg

      - name: Build archive
        shell: bash
        run: |
          compressed="git-kit-${{ matrix.target }}"
          mkdir $compressed
          cp {README.md,LICENSE,templates/conventional.yml,templates/default.yml} "$compressed/"

          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "$compressed/"
            7z a "$compressed.zip" "$compressed"
            echo "ASSET=$compressed.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "$compressed/"
            tar czf "$compressed.tar.gz" "$compressed"
            echo "ASSET=$compressed.tar.gz" >> $GITHUB_ENV
          fi

      # - uses: actions/upload-artifact@v2.2.4
      #   with:
      #     name: bins-${{ matrix.build }}
      #     path: ${{ env.ASSET }}

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

  cargo-publish-dry:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --dry-run

  # cargo-publish:
  #   runs-on: ubuntu-latest
  #   env:
  #     CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         # Allows us to use the git tag version as the package version
  #         command: install
  #         args: cargo-release
  #     - name: Update Cargo.toml version
  #       run: |
  #         TAG_VERSION=$(echo $GITHUB_REF | cut -d '/' -f 3)
  #         cargo release version "$TAG_VERSION" --no-confirm --execute
  #     # Publish and allow dirty since the Cargo.toml version is changed.
  #     - name: Publish package
  #       run: cargo publish --token "$CARGO_TOKEN" --allow-dirty
  #   needs: [build, cargo-publish-dry]
